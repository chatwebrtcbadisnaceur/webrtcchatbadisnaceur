{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93c62296.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\nimport \"./App.css\";\r\n\r\nconst socket = io.connect(\"http://localhost:5000\");\r\nfunction App() {\r\n  const [me, setMe] = useState(\"\");\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        myVideo.current.srcObject = stream;\r\n      });\r\n\r\n    socket.on(\"me\", (id) => {\r\n      setMe(id);\r\n    });\r\n\r\n    socket.on(\"callUser\", (data) => {\r\n      setReceivingCall(true);\r\n      setCaller(data.from);\r\n      setName(data.name);\r\n      setCallerSignal(data.signal);\r\n    });\r\n  }, []);\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name: name,\r\n      });\r\n    });\r\n    peer.on(\"stream\", (stream) => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n    socket.on(\"callAccepted\", (signal) => {\r\n      setCallAccepted(true);\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"answerCall\", { signal: data, to: caller });\r\n    });\r\n    peer.on(\"stream\", (stream) => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n\r\n    peer.signal(callerSignal);\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n    connectionRef.current.destroy();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 style={{ textAlign: \"center\", color: \"#fff\" }}>top notch M.E.R.N. stack • full stack developer • open source WebRTC</h1>\r\n      <div className=\"container\">\r\n        <div className=\"video-container\">\r\n          <div className=\"video\">\r\n            {stream && (\r\n              <video\r\n                playsInline\r\n                muted\r\n                ref={myVideo}\r\n                autoPlay\r\n                style={{ width: \"300px\" }}\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"video\">\r\n            {callAccepted && !callEnded ? (\r\n              <video\r\n                playsInline\r\n                ref={userVideo}\r\n                autoPlay\r\n                style={{ width: \"300px\" }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className=\"myId\">\r\n          <TextField\r\n            id=\"filled-basic\"\r\n            label=\"Name\"\r\n            variant=\"filled\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<AssignmentIcon fontSize=\"large\" />}\r\n            >\r\n              Copy ID\r\n            </Button>\r\n          </CopyToClipboard>\r\n\r\n          <TextField\r\n            id=\"filled-basic\"\r\n            label=\"ID to call\"\r\n            variant=\"filled\"\r\n            value={idToCall}\r\n            onChange={(e) => setIdToCall(e.target.value)}\r\n          />\r\n          <div className=\"call-button\">\r\n            {callAccepted && !callEnded ? (\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n                End Call\r\n              </Button>\r\n            ) : (\r\n              <IconButton\r\n                color=\"primary\"\r\n                aria-label=\"call\"\r\n                onClick={() => callUser(idToCall)}\r\n              >\r\n                <PhoneIcon fontSize=\"large\" />\r\n              </IconButton>\r\n            )}\r\n            {idToCall}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {receivingCall && !callAccepted ? (\r\n            <div className=\"caller\">\r\n              <h1>{name} is calling...</h1>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n                Answer\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}